{"version":3,"sources":["components/RegularHoursChart.jsx","components/ChartList.jsx","components/StockList.jsx","App.jsx","index.jsx"],"names":["RegularHoursChart","props","date","data","style","textAlign","color","width","height","type","dataKey","stroke","isAnimationActive","dot","strokeWidth","tickFormatter","x","slice","tickCount","domain","ChartList","useState","dailyBars","setDailyBars","useEffect","axios","stock","then","res","catch","err","console","error","pages","map","set","key","ranId","Math","random","sm","id","log","StockList","setStock","htmlFor","name","onChange","e","target","value","i","defaults","baseURL","process","REACT_APP_API_DOMAIN","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAoBe,SAASA,EAAkBC,GACxC,IAAMC,EAAOD,EAAME,KAAK,GAAGD,KAuE3B,OACE,iCACE,sBAAKE,MAAO,CAAEC,UAAW,SAAUC,MAAO,QAA1C,UAAqDJ,EAArD,OACA,cAAC,IAAD,CAAqBK,MAAM,OAAOC,OAAQ,IAA1C,SACE,eAAC,IAAD,CAAeL,KAAMF,EAAME,KAA3B,UAOE,cAAC,IAAD,CACEM,KAAK,WACLC,QAAQ,UACRC,OAAO,UACPC,mBAAmB,EACnBC,KAAK,EACLC,YAAa,IASf,cAAC,IAAD,CACEJ,QAAQ,OACRK,cAAe,SAAAC,GAAC,OAAIA,EAAEC,MAAM,EAAG,IAC/BC,UAAU,MAEZ,cAAC,IAAD,CAAOC,OAAQ,CAAC,UAAW,aAC3B,cAAC,IAAD,Y,mBChHK,SAASC,EAAUnB,GAAO,MAELoB,mBAAS,IAFJ,mBAEhCC,EAFgC,KAErBC,EAFqB,KA+BvC,OA3BAC,qBAAU,WAERD,EAAa,IAiBXE,IAAM,QAAD,OAASxB,EAAMyB,MAAf,UACFC,MAAK,SAAAC,GAAG,OAAIL,EAAaK,EAAIzB,SAC7B0B,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QAI/B,CAAC7B,EAAMyB,MAAOzB,EAAMgC,QAGrB,mCACE,cAAC,MAAD,UACGX,GACCA,EAAUY,KAAI,SAACC,EAAKC,GAClB,IAAMC,EAAQC,KAAKC,SAAWD,KAAKC,SAEnC,OACE,cAAC,MAAD,CAAKC,GAAI,EAAT,SACE,sBAAKC,GAAIJ,EAAT,UACGN,QAAQW,IAAI,OAAQL,GACpBN,QAAQW,IAAI,OAAQL,GACrB,cAACrC,EAAD,CAA6BG,KAAMgC,EAAKE,MAAOA,GAAvBD,GAH1B,gBC5CD,SAASO,IAKtB,IALkC,EAyBRtB,mBAAS,QAzBD,mBAyB3BK,EAzB2B,KAyBpBkB,EAzBoB,KAsDlC,OACE,qCACE,uBAAOC,QAAQ,SAAf,4BACA,wBAAQC,KAAK,SAASL,GAAG,aAAaM,SAP1C,SAAsBC,GACpBJ,EAASI,EAAEC,OAAOC,QAMhB,SApDW,CACb,OACA,OACA,OACA,OACA,KACA,OACA,KACA,OACA,QACA,OACA,MACA,MAyCYhB,KAAI,SAACR,EAAOyB,GAClB,OACE,wBAAQD,MAAOxB,EAAf,SACGA,GADwByB,QAMjC,uBACU,cAAC/B,EAAD,CAAWM,MAAOA,EAAOO,MA7CzB,OCvBhBR,IAAM2B,SAASC,QAAUC,gJAAYC,qBAWtBC,MATf,WACE,OACE,mCACE,cAACb,EAAD,OCRNc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3be59e55.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n  ComposedChart,\n  Bar,\n} from \"recharts\";\n\nimport Chart from \"react-apexcharts\";\n\n/**\n *\n * Holds the actual single chart\n */\nexport default function RegularHoursChart(props) {\n  const date = props.data[0].date;\n  const datak = [\n    {\n      id: 3233,\n      stock: \"TSLA\",\n      timestamp: \"2020-08-05T09:30:00\",\n      date: \"2020-08-05\",\n      time: \"09:30:00\",\n      open: 299.212,\n      high: 299.588,\n      low: 298,\n      close: 268,\n    },\n    {\n      id: 3232,\n      stock: \"TSLA\",\n      timestamp: \"2020-08-05T10:00:00\",\n      date: \"2020-08-05\",\n      time: \"10:00:00\",\n      open: 298.598,\n      high: 299.96768,\n      low: 294.406,\n      close: 278,\n    },\n  ];\n\n  const series = [\n    {\n      data: [\n        {\n          x: \"10:00:00\",\n          y: [6629.81, 6650.5, 6623.04, 6633.33],\n        },\n        {\n          x: \"10:30:00\",\n          y: [6632.01, 6643.59, 6620, 6630.11],\n        },\n        {\n          x: \"11:00:00\",\n          y: [6630.71, 6648.95, 6623.34, 6635.65],\n        },\n      ],\n    },\n  ];\n\n  const options = {\n    chart: {\n      zoom: {\n        enabled: false,\n      },\n      animations: {\n        enabled: false,\n      },\n      type: \"candlestick\",\n      height: 350,\n    },\n    title: {\n      text: \"CandleStick Chart\",\n      align: \"left\",\n    },\n    xaxis: {\n      type: \"time\",\n      tickAmount: 6,\n    },\n    yaxis: {\n      tooltip: {\n        enabled: true,\n      },\n    },\n  };\n\n  return (\n    <span>\n      <div style={{ textAlign: \"center\", color: \"gray\" }}>{date} </div>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <ComposedChart data={props.data}>\n          {/* <Line\ntype=\"monotone\"\ndataKey=\"open\"\nstroke=\"#8884d8\"\nisAnimationActive={false}\n/> */}\n          <Line\n            type=\"monotone\"\n            dataKey=\"average\"\n            stroke=\"#13152b\"\n            isAnimationActive={false}\n            dot={false}\n            strokeWidth={2}\n          />\n          {/* <Line\n            type=\"linear\"\n            dataKey=\"low\"\n            stroke=\"red\"\n            isAnimationActive={false}\n          /> */}\n\n          <XAxis\n            dataKey=\"time\"\n            tickFormatter={x => x.slice(0, 5)}\n            tickCount=\"5\"\n          />\n          <YAxis domain={[\"dataMin\", \"dataMax\"]} />\n          <Tooltip />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </span>\n  );\n}\n\n{\n  /* <Chart\n  options={options}\n  series={props.data.series}\n  type=\"candlestick\"\n  height={350}\n/> */\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport RegularHoursChart from \"./RegularHoursChart\";\nimport { Row, Col } from \"react-grid-system\";\nimport fs from \"fs\";\n\n/**\n * Takes the number of pages and selected stock\n * From the selected stock gets the stock data.\n * Iterates for each day to render and sends stock data to RegularHoursChart\n *\n */\nexport default function ChartList(props) {\n  // collection of bars for one single day\n  const [dailyBars, setDailyBars] = useState([]);\n\n  useEffect(() => {\n    // refresh data on new stock selection\n    setDailyBars([]);\n\n    // // API version stock data fetch\n    // async function fetchBars() {\n    //   // fetch each page in background with 1s delay\n    //   for (let i = 0; i < props.pages; i++) {\n    //     await axios(`/daily-regular/${props.stock}/?page=${i}`)\n    //       .then(res => {\n    //         setDailyBars(dailyBars => dailyBars.concat(res.data));\n    //       })\n    //       .catch(err => console.error(err));\n    //     await setTimeout(() => {}, 3000);\n    //   }\n    // }\n\n    // File system version data fetch\n    function fetchBars(stock) {\n      axios(`data/${props.stock}.json`)\n        .then(res => setDailyBars(res.data))\n        .catch(err => console.error(err));\n    }\n\n    fetchBars();\n  }, [props.stock, props.pages]);\n\n  return (\n    <>\n      <Row>\n        {dailyBars &&\n          dailyBars.map((set, key) => {\n            const ranId = Math.random() * Math.random();\n\n            return (\n              <Col sm={4}>\n                <div id={ranId}>\n                  {console.log(\"out1\", ranId)}\n                  {console.log(\"out2\", ranId)}\n                  <RegularHoursChart key={key} data={set} ranId={ranId} />;\n                </div>\n              </Col>\n            );\n          })}\n      </Row>\n    </>\n  );\n}\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport ChartList from \"./ChartList\";\n\n/**\n * Component to choose the stock to diplay charts.\n * Sends number of pages and selected stock to the ChartList\n */\nexport default function StockList() {\n  // list of stocks available for display\n  // const [stocks, setStocks] = useState([]);\n\n  // list of stocks available\n  const stocks = [\n    \"TSLA\",\n    \"AAPL\",\n    \"ETSY\",\n    \"SHOP\",\n    \"SQ\",\n    \"AMZN\",\n    \"BB\",\n    \"BIGC\",\n    \"GOOGL\",\n    \"MSFT\",\n    \"WIX\",\n    \"ZM\",\n  ];\n\n  // number of pages for the choosen stock\n  // const [pages, setPages] = useState(0);\n  const pages = 1;\n\n  // chosen stock to display\n  const [stock, setStock] = useState(\"TSLA\");\n\n  // useEffect(() => {\n  //   // // get the list of stocks\n  //   // axios(\"/stock-list/\")\n  //   //   .then(res => {\n  //   //     setStocks(res.data);\n  //   //   })\n  //   //   .catch(err => console.err(err));\n\n  //   // // get number of pages for the choosen stock\n  //   // axios(`count-pages/${stock}/`)\n  //   //   .then(res => setPages(res.data))\n  //   //   .catch(err => console.error(err));\n  // }, [stock]);\n\n  // // API handle select\n  // function handleSelect(e) {\n  //   setStock(e.target.value);\n  //   axios(`count-pages/${stock}/`)\n  //     .then(res => setPages(res.data))\n  //     .catch(err => console.error(err));\n  // }\n\n  // File system data handle select\n  function handleSelect(e) {\n    setStock(e.target.value);\n  }\n\n  return (\n    <>\n      <label htmlFor=\"stocks\">Select stock: </label>\n      <select name=\"stocks\" id=\"stock-list\" onChange={handleSelect}>\n        {stocks.map((stock, i) => {\n          return (\n            <option value={stock} key={i}>\n              {stock}\n            </option>\n          );\n        })}\n      </select>\n      <hr />\n      {pages && <ChartList stock={stock} pages={pages} />}\n    </>\n  );\n}\n","import React from \"react\";\nimport axios from \"axios\";\nimport ChartList from \"./components/ChartList\";\nimport StockList from \"./components/StockList\";\nimport RegularHoursChart from \"./components/RegularHoursChart\";\n\n/* ---------------------------------- axios --------------------------------- */\naxios.defaults.baseURL = process.env.REACT_APP_API_DOMAIN;\n\nfunction App() {\n  return (\n    <>\n      <StockList />\n      {/* <RegularHoursChart /> */}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}